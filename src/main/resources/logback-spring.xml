<?xml version="1.0" encoding="UTF-8"?>
<!--根节点configuration包含的属性：
	 scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
	 scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
	 debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->
    <!-- property节点：用来定义变量值的标签， 有两个属性，name和value；
    	   其中name的值是变量的名称，value的值时变量定义的值。
    	   通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 -->
    <property name="LOG_HOME" value="${user.dir}/logs" />
    
    <!-- appender：用来格式化日志输出节点，有俩个属性name和class，class用来指定哪种输出策略，常用就是控制台输出策略和文件输出策略。 -->
    <!-- 控制台输出  ConsoleAppender -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
        		<!-- <encoder>表示对日志进行编码;
					 <pattern>格式化输出：
						%d{HH: mm:ss.SSS}——日志输出时间
						%thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用
						%-5level——日志级别，并且使用5个字符靠左对齐
						%logger{50}——日志输出者的名字（也就是类的名字）
						%msg——日志消息
						%n——的换行符 
				 -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
        <!-- ThresholdFilter为系统定义的拦截器，例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中。如果不用记得注释掉，不然你控制台会发现没日志~ -->
        <!-- <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
             <level>ERROR</level>
        </filter> -->
    </appender>
    
    <!-- 输出到文件，每天生成日志文件  RollingFileAppender -->
    <!-- 随着应用的运行时间越来越长，日志也会增长的越来越多，将他们输出到同一个文件并非一个好办法。
    	 RollingFileAppender用于切分文件日志：根据日志级别切分和根据时间一个日志文件 -->
    <appender name="FILE"  class="ch.qos.logback.core.rolling.RollingFileAppender">
    	<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
	    <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则;
		        如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
		        的日志改名为今天的日期。即，<File> 的日志都是当天的。
	    -->
	    <File>${LOG_HOME}/springboot-mybatis.log</File>
	    <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
            <FileNamePattern>springboot-mybatis.%d{yyyy-MM-dd_HH-mm}.log</FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志  注意，删除旧文件是，那些为了归档而创建的目录也会被删除。-->
       		<!-- <totalSizeCap>1GB</totalSizeCap> -->
        </rollingPolicy>
        <!--日志输出编码格式化-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度，%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
        <!--日志文件最大的大小-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>20MB</MaxFileSize>
        </triggeringPolicy>
    </appender>

    <!-- 日志输出级别 -->
    <!-- root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性。
		 level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。 
		   默认是DEBUG。 
		   可以包含零个或多个元素，标识这个appender将会添加到这个loger。 -->
    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="FILE" />
    </root>
</configuration>